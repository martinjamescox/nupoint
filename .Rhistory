install.packages(c("knitr", "markdown"))
install.packages("C:/Users/erexstad/Dropbox/wisp_1.2.6.zip", repos = NULL)
library(wisp)
install.packages("C:/Users/erexstad/Dropbox/wisp_1.2.6.zip", repos = NULL)
library("wisp", lib.loc="C:/Users/erexstad/Documents/R/win-library/2.15")
dens <- generate.density(reg,nint.x = 100, nint.y = 50, southwest = 1, southeast = 10, northwest = 20)
reg <- generate.region(x.length =100, y.width = 50)
dens <- generate.density(reg,nint.x = 100, nint.y = 50, southwest = 1, southeast = 10, northwest = 20)
pop.pars<-setpars.population(density.pop = dens, number.groups = 250, size.method = "user",
size.values = 1, size.prob = 1, exposure.method = "user",
exposure.values = c(.1, .2, .3, .4, .5), exposure.prob = c(.1,.2,.4,.2,.1))
pop.pars<-setpars.population(density.pop = dens, number.groups = 250, size.method = "user",
size.values = 1, size.prob = 1, exposure.method = "user",
exposure.values = c(.1, .2, .3, .4, .5), exposure.prob = c(.1,.2,.4,.2,.1),
exposure.min=0, exposure.max=1)
plot(pop.pars)
dens <- generate.density(reg,nint.x = 100, nint.y = 50)
pop.pars<-setpars.population(density.pop = dens, number.groups = 250, size.method = "user",
size.values = 1, size.prob = 1, exposure.method = "user",
exposure.values = c(.1, .2, .3, .4, .5), exposure.prob = c(.1,.2,.4,.2,.1),
exposure.min=0, exposure.max=1)
plot(pop.pars)
mypop <- generate.population(pop.pars)
plot(mypop)
occ <- 3
occasions <- generate.design.cr(region, n.occ = occ)
occasions <- generate.design.cr(reg, n.occ = occ)
this.design <- setpars.survey.cr(pop, occasions, pmin.unmarked = 0.01, pmax.unmarked = 0.4,
pmin.marked = 0.01, pmax.marked = 0.2)
this.design <- setpars.survey.cr(mypop, occasions, pmin.unmarked = 0.01, pmax.unmarked = 0.4,
pmin.marked = 0.01, pmax.marked = 0.2)
plot(this.design)
this.survey <- setpars.survey.cr(mypop, occasions, pmin.unmarked = 0.01, pmax.unmarked = 0.4,
pmin.marked = 0.01, pmax.marked = 0.2)
plot(this.design)
sim0 <- point.sim.crM0(pop.pars, this.survey, occasions)
plot(sim0)
mse=function(simest)
{
bias=mean(simest$est$Nhat.grp)-simest$true$Nhat.grp
pcbias=100*bias/simest$true$Nhat.grp
varest=var(simest$est$Nhat.grp)
mse=bias^2+varest
return(list(pcbias=signif(pcbias,3), se=sqrt(varest), mse=mse))
}
for (occ in 3:5) {
occasions <- generate.design.cr(reg, n.occ = occ)
this.survey <- setpars.survey.cr(mypop, occasions, pmin.unmarked = 0.01, pmax.unmarked = 0.4,
pmin.marked = 0.01, pmax.marked = 0.2)
# plot(this.design)
sim0 <- point.sim.crM0(pop.pars, this.survey, occasions)
(mse(sim0))
}
for (occ in 3:5) {
occasions <- generate.design.cr(reg, n.occ = occ)
this.survey <- setpars.survey.cr(mypop, occasions, pmin.unmarked = 0.01, pmax.unmarked = 0.4,
pmin.marked = 0.01, pmax.marked = 0.2)
# plot(this.design)
sim0 <- point.sim.crM0(pop.pars, this.survey, occasions)
print(mse(sim0))
}
for (occ in 3:10) {
occasions <- generate.design.cr(reg, n.occ = occ)
this.survey <- setpars.survey.cr(mypop, occasions, pmin.unmarked = 0.01, pmax.unmarked = 0.4,
pmin.marked = 0.01, pmax.marked = 0.2)
# plot(this.design)
sim0 <- point.sim.crM0(pop.pars, this.survey, occasions)
print(mse(sim0)$pcbias)
}
mse=function(simest)
{
bias=mean(simest$est$Nhat.grp)-simest$true$Nhat.grp
pcbias=100*bias/simest$true$Nhat.grp
varest=var(simest$est$Nhat.grp)
mse=bias^2+varest
return(list(bias=bias, pcbias=signif(pcbias,3), se=sqrt(varest), mse=mse))
}
for (occ in 3:10) {
occasions <- generate.design.cr(reg, n.occ = occ)
this.survey <- setpars.survey.cr(mypop, occasions, pmin.unmarked = 0.01, pmax.unmarked = 0.4,
pmin.marked = 0.01, pmax.marked = 0.2)
# plot(this.design)
sim0 <- point.sim.crM0(pop.pars, this.survey, occasions)
funcreturn <- mse(sim0)
this.cost <- 10000 + occ*10000 + funcreturn$bias^2
print(this.cost)
}
sh <- c(43, 35, 38)
jh <- 35
all.mean <- mean(c(sh,jh))
all.mean
install.packages(c("markdown", "mrds", "Rcpp"))
library(slidify)
library(slidifyLibraries)
install.packages("png")
library(jpg)
install.packages("jpeg")
library(jpg)
library(jpeg)
img <- readJPEG("theorystat.PNG")
img <- readJPEG("eric.jpg")
img <- readJPEG("eric.JPG")
getwd()
install.packages("animation")
library(animation)
sample.simple(nrow = 10, ncol = 10, size = 15, p.col = c("blue", "red"), p.cex = c(1, 3))
library(animation)
saveHTML({sample.simple(nrow = 10, ncol = 10, size = 15, p.col = c("blue", "red"), p.cex = c(1, 3))},
img.name="eric", imgdir="img", htmlfile="myplot")
saveHTML({sample.simple(nrow = 10, ncol = 10, size = 15, p.col = c("blue", "red"), p.cex = c(1, 3))},
img.name="eric", imgdir="img", htmlfile="myplot", autobrowse=FALSE, single.opts=";'controls':")
saveHTML({sample.simple(nrow = 10, ncol = 10, size = 15, p.col = c("blue", "red"), p.cex = c(1, 3))},
img.name="eric", imgdir="img", htmlfile="myplot",
outdir="c:\users\erexstad\dropbox\sutton", autobrowse=FALSE, single.opts=";'controls':")
saveHTML({sample.simple(nrow = 10, ncol = 10, size = 15, p.col = c("blue", "red"), p.cex = c(1, 3))},
img.name="eric", imgdir="img", htmlfile="myplot",
outdir="c:\\users\\erexstad\\dropbox\\sutton", autobrowse=FALSE, single.opts=";'controls':")
saveHTML({sample.simple(nrow = 10, ncol = 10, size = 15, p.col = c("blue", "red"), p.cex = c(1, 3))},
img.name="eric", imgdir="img", htmlfile="myplot.html",
outdir="c:\\users\\erexstad\\dropbox\\sutton", autobrowse=FALSE, single.opts=";'controls':")
saveHTML({sample.simple(nrow = 10, ncol = 10, size = 15, p.col = c("blue", "red"), p.cex = c(1, 3))},
img.name="eric", imgdir="img", htmlfile="myplot.html",
outdir="c:\\users\\erexstad\\dropbox\\sutton", autobrowse=FALSE) #, single.opts=";'controls':")
load("C:/Users/erexstad/Dropbox/sutton/Benford.RData")
fix(fraud.func)
fraud.func(c(30, 22, 8, 12, 9, 7, 5, 4, 3))
fix(benford.probs)
fix(find.sigdigit.func)
fix(fraud.func)
install.packages(c("devtools", "Distance", "evaluate", "installr", "munsell"))
sh <- c(43, 35, 38)
jh <- 35
all.mean <- mean(c(sh,jh))
.libPaths()
install.packages("C:/Users/erexstad/nupoint_1.0.50.tar.gz", repos = NULL, type = "source")
install.packages(c("evaluate", "formatR", "knitr", "maps", "optimx", "png"))
install.packages("highr")
library(devtools)
install.packages("evaluate")
library(devtools)
getwd()
setwd("github/nupoint")
getwd()
document()
build()
build(binary=TRUE)
detach(package:nupoint)
unload(nupoint)
library("nupoint", lib.loc="C:/Users/erexstad/Documents/R/win-library/3.0")
truncate
detectF
nupoint.fit
truncate
library(nupoint)
mysim <- nupoint.env.simulator(pars=c(60,10,50),z.mat=NULL,xlim=c(0,200),ylim=c(0,100),
grid.resolution=1,grad.type='NORM',det.type='HNORM',
observer.coords=c(100,0),nbr.targets=350,
environment.simulator.control=list(c(X=50,Y=10,sd=60),c(X=90,Y=0,sd=30)),
mask.mat=NULL,mask.ang=0,plot=TRUE,
perp.lines=NULL,n=NULL)
correct.model <- est.abundance.from.sim(mysim, trunc.prop=0.9, det.model=NULL, gradient.model=NULL)
wrong.uni <- est.abundance.from.sim(mysim, trunc.prop=0.9, det.model=NULL, gradient.model="UNIFORM")
wrong.beta <- est.abundance.from.sim(mysim, trunc.prop=0.9, det.model=NULL, gradient.model="BETA")
wrong.lognorm <- est.abundance.from.sim(mysim, trunc.prop=0.9, det.model=NULL, gradient.model="LOGNORM")
getwd()
build(binary=TRUE)
